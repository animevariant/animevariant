---
- name: Include Cloudflare domain and zone IDs variables
  ansible.builtin.include_vars:
    file: "vars/cloudflare_vars.yml"

- name: Debug cloudflare_zone_ids variable content
  ansible.builtin.debug:
    var: cloudflare_zone_ids

- name: Initialize detailed domain list
  set_fact:
    detailed_domain_list: []

# Ensure directories exist
- name: Ensure nginx directory exists
  become: true 
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/nginx"
    state: directory
    owner: ubuntu
    group: ubuntu
    mode: '0755'

- name: Generate Docker Compose file
  ansible.builtin.template:
    src: "docker/docker-compose.yaml.j2"
    dest: "{{ ansible_env.HOME }}/docker-compose.yml"
    mode: "0644"

- name: Generate Docker Compose file for certbot with dynamic domain names
  ansible.builtin.template:
    src: "docker/docker-compose.certbot.yml.j2"
    dest: "{{ ansible_env.HOME }}/docker-compose.certbot.yml"
    mode: "0644"

- name: Ensure ubuntu owns the home directory subfolders
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: ubuntu
    group: ubuntu
    mode: '0755'
  loop:
    - "{{ ansible_env.HOME }}/nginx"

- name: Generate http NGINX configuration with dynamic domain names
  ansible.builtin.template:
    src: "nginx/http.conf.j2"
    dest: "{{ ansible_env.HOME }}/nginx/nginx.conf"
    mode: "0644"

- name: Create 'monitoring' network if it does not exist
  become: true
  ansible.builtin.command: docker network create monitoring
  register: network_creation
  failed_when: network_creation.rc != 0 and 'already exists' not in network_creation.stderr
  ignore_errors: yes

- name: Pull the latest images with Docker Compose
  command: docker-compose pull
  become: true
  args:
    chdir: "{{ ansible_env.HOME }}/"

- name: Debug Docker containers after pulling images
  command: docker ps -a
  register: docker_ps_pull
  become: true
  args:
    chdir: "{{ ansible_env.HOME }}/"
  ignore_errors: yes

- name: Display Docker containers after pulling images
  debug:
    var: docker_ps_pull.stdout_lines

- name: Deploy nginx service using Docker Compose
  command: docker-compose up -d nginx
  become: true
  args:
    chdir: "{{ ansible_env.HOME }}/"

- name: Debug Docker containers after deploying NGINX
  command: docker ps -a
  register: docker_ps_up_nginx
  become: true
  args:
    chdir: "{{ ansible_env.HOME }}/"
  ignore_errors: yes

- name: Display Docker containers after deploying NGINX
  debug:
    var: docker_ps_up_nginx.stdout_lines

- name: Build detailed domain list from cloudflare_zone_ids
  ansible.builtin.set_fact:
    detailed_domain_list: "{{ detailed_domain_list | default([]) + [{'domain': item.key} | combine(item.value)] }}"
  loop: "{{ lookup('dict', cloudflare_zone_ids) }}"
  loop_control:
    loop_var: item

- name: Determine the primary domain
  set_fact:
    primary_domain: "{{ cloudflare_zone_ids.keys() | list | first }}"

- name: Check if SSL certificate needs renewal for the primary domain
  ansible.builtin.command: >
    openssl x509 -checkend 864000 -noout -in {{ ansible_env.HOME }}/certbot/conf/live/{{ primary_domain }}/fullchain.pem
  register: cert_check
  failed_when: cert_check.rc > 1
  ignore_errors: yes

- name: Debug primary_domain variable content
  ansible.builtin.debug:
    var: primary_domain

- name: Debug detailed_domain_list variable content
  ansible.builtin.debug:
    var: detailed_domain_list

- name: Obtain SSL certificates with Certbot if needed
  command: docker-compose -f docker-compose.certbot.yml run --rm certbot
  become: true
  args:
    chdir: "{{ ansible_env.HOME }}/"
  when: cert_check.rc == 1

- name: Debug Docker containers after obtaining SSL certificates
  command: docker ps -a
  register: docker_ps_certbot
  become: true
  args:
    chdir: "{{ ansible_env.HOME }}/"
  ignore_errors: yes

- name: Display Docker containers after obtaining SSL certificates
  debug:
    var: docker_ps_certbot.stdout_lines

- name: Generate https NGINX configuration with dynamic domain names (switch to HTTPS)
  ansible.builtin.template:
    src: "nginx/https.conf.j2"
    dest: "{{ ansible_env.HOME }}/nginx/nginx.conf"
    mode: "0644"

- name: Stop existing Docker Compose services
  command: docker-compose down --remove-orphans
  become: true
  args:
    chdir: "{{ ansible_env.HOME }}/"

- name: Debug Docker containers after stopping services
  command: docker ps -a
  register: docker_ps_down
  become: true
  args:
    chdir: "{{ ansible_env.HOME }}/"
  ignore_errors: yes

- name: Display Docker containers after stopping services
  debug:
    var: docker_ps_down.stdout_lines

- name: Deploy services using Docker Compose
  command: docker-compose up -d
  become: true
  args:
    chdir: "{{ ansible_env.HOME }}/"

- name: Debug Docker containers after final deployment
  command: docker ps -a
  register: docker_ps_final
  become: true
  args:
    chdir: "{{ ansible_env.HOME }}/"
  ignore_errors: yes

- name: Display Docker containers after final deployment
  debug:
    var: docker_ps_final.stdout_lines

- name: Delete all hanging stuff
  command: docker system prune -a -f
  become: true
  args:
    chdir: "{{ ansible_env.HOME }}/"

- name: Debug Docker containers after pruning
  command: docker ps -a
  register: docker_ps_prune
  become: true
  args:
    chdir: "{{ ansible_env.HOME }}/"
  ignore_errors: yes

- name: Display Docker containers after pruning
  debug:
    var: docker_ps_prune.stdout_lines

- name: Schedule automated certificate renewal
  ansible.builtin.cron:
    name: "Renew Let's Encrypt certificates"
    day: "1"
    month: "*/2"
    hour: "5"
    minute: "0"
    job: "cd {{ ansible_env.HOME }} && docker-compose run --rm certbot renew && docker-compose exec nginx nginx -s reload"
    user: ubuntu
